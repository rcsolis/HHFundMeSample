{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n// Importing an interface for create an instance and call methods \nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// Error definitions\nerror EmptyFunderList();\nerror TransactionFails();\nerror NotOwner(address sender);\nerror NotEnoughETH(uint256 amount, uint256 required);\nerror InsufficientBalance(uint256 available, uint256 required);\n\n// Declare a library to extend uint256\nlibrary NumberParser {\n    /**\n    * Gets the number using base 1e18\n    * @param {uint256} number The uint256 number to parse\n    * @return {uint256} Wei equivalent of the number\n    */\n    function toWeiBase(uint256 number) internal pure returns(uint256){\n        return number * 1e18;\n    }\n}\n// Contract definition\ncontract HHFundMe {\n    // Extend the uint256 type with the NumberParser library\n    using NumberParser for uint256;\n    // Chainlink DataFeed\n    AggregatorV3Interface internal priceFeed;\n    // Constant for define the minimum quantity of ETH allowed to be received per transfer\n    uint256 private constant CMIN_RECIEVE_AMOUNT_USD = 1;\n    // Constant for define the minimun quantity of ETH allowed to be withdrawed\n    uint256 private constant CMIN_WITHDRAW_AMOUNT_USD = 10;\n    // Constant for the owner\n    address private immutable iOwner;\n    // Struct to define a transaction\n    struct FunderTx {\n        uint256 blockId;\n        uint256 amount;\n        uint256 createdAt;\n    }\n    // Struct to define a funder\n    struct Funder {\n        uint256 totalAmount;\n        bool initialized;\n        FunderTx[] transactions;\n    }\n    // Funders mapping\n    mapping(address => Funder) private funders;\n    address[] private fundersAddr;\n    \n    // Events for fund and withdraw actions\n    event WithdrawEvent(address indexed _from, uint256 _amount);\n    event FundEvent(address indexed _from, uint256 _usd, uint256 _amount);\n\n    constructor(address _priceFeed) {\n        /**\n         * Network: Goerli\n         * Aggregator: ETH/USD\n         * Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n         */\n        priceFeed = AggregatorV3Interface(\n            _priceFeed\n        );\n        // Save the deploy wallet address as the owner\n        iOwner = msg.sender;\n    }\n    /**\n    * Gets the current price of ETH/USD (Chainlink DataFeed)\n    * @return {uint256} Latest price reference\n    */\n    function getEthToUsdPrice() internal view returns (uint256) {\n        (\n            /*uint80 roundId*/,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        // Parse int to uint, we receive a number with 12 digits like: 158628000000\n        // this includes 8 digits from the end that we don't need to include\n        // So if we use numbers with 1e18 ( because 1ETH == 1 * 1e18 wei) for the arithmetic operations we need to add 10 ceros\n        // Getting something like: 1586280000000000000000\n        return uint256(answer * 1e10); // 1e10 == 1**10\n    }\n    /**\n    * Parse wei to usd\n    * @param {uint256} weiAmount Amount to parse\n    * @return {uint256} Parsed amount using 1e18 base\n    */\n    function weiToUSD(uint256 weiAmount) internal view returns(uint256){\n        uint256 ethPrice = getEthToUsdPrice();\n        return (ethPrice*weiAmount) / 1e18;\n    }\n\n    /**\n    * Gets the higher funder\n    * @return {address} Address of the highest funder\n    */\n    function getHighestFunder() internal view returns(address) {\n        uint256 highest = 0;\n        uint idx = 0;\n\n        for(uint i = 0; i < fundersAddr.length; i++){\n            if(funders[fundersAddr[i]].totalAmount > highest){\n                highest = funders[fundersAddr[i]].totalAmount;\n                idx = i;\n            }\n        }\n        return fundersAddr[idx];\n    }\n    /**\n    * Helper function to check if an address already is a funder\n    * @param {address} _sender Address to check\n    * @return {boool} Already funder\n    */\n    function isDuplicated(address _sender) internal view returns(bool){\n        return funders[_sender].initialized;\n    }\n    /**\n    * Public function to gets the higher funder\n    * @return {address} Highest funder\n    */\n    function highestFunder() public view returns(address){\n        if( fundersAddr.length == 0){\n            revert EmptyFunderList();\n        }\n        return getHighestFunder();\n    }\n    /**\n    * Payable function to gets funds from funders\n    */\n    function fund() public payable{\n        uint256 usdReceived = weiToUSD(msg.value);\n        if( usdReceived < CMIN_RECIEVE_AMOUNT_USD.toWeiBase() ){\n            revert NotEnoughETH({\n                amount: usdReceived, \n                required: CMIN_RECIEVE_AMOUNT_USD.toWeiBase()\n            });\n        }\n        \n        if( isDuplicated(msg.sender) ){\n            funders[msg.sender].transactions.push( FunderTx( block.number, msg.value,  block.timestamp) );\n            funders[msg.sender].totalAmount += msg.value;\n        }else{\n            funders[msg.sender].totalAmount = msg.value;\n            funders[msg.sender].initialized = true;\n            funders[msg.sender].transactions.push(FunderTx( block.number, msg.value,  block.timestamp));\n            fundersAddr.push(msg.sender);\n        }\n        emit FundEvent(msg.sender, usdReceived, msg.value);\n    }\n    /**\n    * Modifier to ensure that only owner (deployer address) can withdraw funds\n    */\n    modifier OnlyOwner {\n        if(msg.sender != iOwner){\n            revert NotOwner(msg.sender);\n        }\n        _; // Continue execution\n    }\n    /**\n    * Public function to withdraw current balance\n    */\n    function withdraw() public OnlyOwner{\n        if( weiToUSD(address(this).balance) < CMIN_WITHDRAW_AMOUNT_USD.toWeiBase() ){\n            revert InsufficientBalance({\n                available: address(this).balance,\n                required: CMIN_WITHDRAW_AMOUNT_USD.toWeiBase()\n            });\n        }\n        //fundersAddr = new address[](0);\n        (bool result, ) = payable(iOwner).call{value: address(this).balance}(\"\");\n        if(!result){\n            revert TransactionFails();\n        }\n        emit WithdrawEvent(msg.sender, address(this).balance);\n    }\n}"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}